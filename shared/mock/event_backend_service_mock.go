// Code generated by MockGen. DO NOT EDIT.
// Source: ../../orchestrator/rpc/api/events/api.go

// Package mock is a generated GoMock package.
package mock

import (
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
	types "github.com/lukso-network/lukso-orchestrator/shared/types"
	eth2_types "github.com/prysmaticlabs/eth2-types"
	reflect "reflect"
)

// MockBackend is a mock of Backend interface
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CurrentEpoch mocks base method
func (m *MockBackend) CurrentEpoch() eth2_types.Epoch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEpoch")
	ret0, _ := ret[0].(eth2_types.Epoch)
	return ret0
}

// CurrentEpoch indicates an expected call of CurrentEpoch
func (mr *MockBackendMockRecorder) CurrentEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEpoch", reflect.TypeOf((*MockBackend)(nil).CurrentEpoch))
}

// ConsensusInfoByEpochRange mocks base method
func (m *MockBackend) ConsensusInfoByEpochRange(fromEpoch, toEpoch eth2_types.Epoch) map[eth2_types.Epoch]*types.MinConsensusInfoEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusInfoByEpochRange", fromEpoch, toEpoch)
	ret0, _ := ret[0].(map[eth2_types.Epoch]*types.MinConsensusInfoEvent)
	return ret0
}

// ConsensusInfoByEpochRange indicates an expected call of ConsensusInfoByEpochRange
func (mr *MockBackendMockRecorder) ConsensusInfoByEpochRange(fromEpoch, toEpoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusInfoByEpochRange", reflect.TypeOf((*MockBackend)(nil).ConsensusInfoByEpochRange), fromEpoch, toEpoch)
}

// SubscribeNewEpochEvent mocks base method
func (m *MockBackend) SubscribeNewEpochEvent(arg0 chan<- *types.MinConsensusInfoEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewEpochEvent", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeNewEpochEvent indicates an expected call of SubscribeNewEpochEvent
func (mr *MockBackendMockRecorder) SubscribeNewEpochEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewEpochEvent", reflect.TypeOf((*MockBackend)(nil).SubscribeNewEpochEvent), arg0)
}
